###########################################

part start ${devtype} ${devnum} 11 mmc_env
${devtype} dev ${devnum}

setenv storebootstate "echo storing env...;saveenv;"

test -n "${BOOT_ORDER}" || setenv BOOT_ORDER "A B"
test -n "${BOOT_A_LEFT}" || setenv BOOT_A_LEFT 3
test -n "${BOOT_B_LEFT}" || setenv BOOT_B_LEFT 3

# Allows ConditionFirstBoot=
if test -z "${MACHINE_ID}"; then
  setenv BOOT_CONDITION "systemd.condition-first-boot=true"
  setenv bootargs
  saveenv
fi

# HassOS bootargs
setenv bootargs_hassos "earlycon=uart8250,mmio32,0x05000000 console=ttyS0,115200 zram.enabled=1 zram.num_devices=3 systemd.machine_id=${MACHINE_ID} fsck.repair=yes ${BOOT_CONDITION}"

# HassOS system A/B
setenv bootargs_a "root=PARTUUID=48617373-06 ro rootwait"
setenv bootargs_b "root=PARTUUID=48617373-09 ro rootwait"


# logical volumes get numbered after physical ones.
# 1. boot
# 2. kernel0
# 3. system0
# 4. hass-img0
# 5. Kernel1
# 6. System1
# 7. hass-img1
# 8. bootstate
# 9. overlay
# 10. data

setenv slot_tried ""
for BOOT_SLOT in ${BOOT_ORDER}; do
  if test "x${bootargs}" != "x"; then
    # skip remaining slots
  elif test "x${BOOT_SLOT}" = "xA"; then
    if test ${BOOT_A_LEFT} -gt 0; then
      setexpr BOOT_A_LEFT ${BOOT_A_LEFT} - 1
      setenv slot_tried "A"
      setenv bootargs
      echo "Trying to boot slot A, ${BOOT_A_LEFT} attempts remaining. Loading kernel ..."
      if load ${devtype} ${devnum}:5 ${loadaddr} fit-Image.itb; then
        setenv loadkernel "load ${devtype} ${devnum}:5 ${loadaddr} fit-Image.itb" 
        setenv bootargs "${bootargs_hassos} ${bootargs_a} rauc.slot=A ${cmdline}"
      fi
    fi
  elif test "x${BOOT_SLOT}" = "xB"; then
    if test ${BOOT_B_LEFT} -gt 0; then
      setexpr BOOT_B_LEFT ${BOOT_B_LEFT} - 1
      setenv slot_tried "B"
      setenv bootargs
      echo "Trying to boot slot B, ${BOOT_B_LEFT} attempts remaining. Loading kernel ..."
      if load ${devtype} ${devnum}:8 ${loadaddr} fit-Image.itb; then
        setenv loadkernel "load ${devtype} ${devnum}:8 ${loadaddr} fit-Image.itb"
        setenv bootargs "${bootargs_hassos} ${bootargs_b} rauc.slot=B ${cmdline}"
      fi
    fi
  fi
done


if test "x${slot_tried}" != "x"; then
  run storebootstate
else
  run loadkernel
fi

if test -z "${bootargs}"; then
  echo "No valid slot found, resetting tries to 3"
  setenv BOOT_A_LEFT 3
  setenv BOOT_B_LEFT 3
  run storebootstate
  reset
fi

echo "Starting kernel....."
bootm ${loadaddr}

echo "Boot failed, resetting..."
reset
